const qrcode = require("qrcode-terminal");
const { Client, LocalAuth } = require("whatsapp-web.js");
const axios = require("axios");
const express = require("express");
const app = express();

// WhatsApp ‡¥ï‡µç‡¥≤‡¥Ø‡¥®‡µç‡¥±‡µç ‡¥Ü‡¥∞‡¥Ç‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
const client = new Client({
  authStrategy: new LocalAuth(),
  puppeteer: { headless: true },
});

// WhatsApp ‡¥™‡µç‡¥∞‡¥æ‡¥Æ‡¥æ‡¥£‡¥ø‡¥ï‡¥§‡¥Ø‡µç‡¥ï‡µç‡¥ï‡¥æ‡¥Ø‡¥ø QR ‡¥ï‡µã‡¥°‡µç ‡¥ú‡¥®‡¥±‡µá‡¥±‡µç‡¥±‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï
client.on("qr", (qr) => {
  qrcode.generate(qr, { small: true });
});

// ‡¥¨‡µã‡¥ü‡µç‡¥ü‡µç ‡¥§ preparedness ‡¥™‡µç‡¥∞‡¥Ø‡µã‡¥ú‡¥®‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥Æ‡µç‡¥™‡µã‡µæ
client.on("ready", () => {
  console.log("WhatsApp Bot is ready!");
});

// API ‡µΩ ‡¥®‡¥ø‡¥®‡µç‡¥®‡µç ‡¥°‡µã‡¥ï‡µç‡¥ü‡µº‡¥Æ‡¥æ‡¥∞‡µÜ ‡¥≤‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥´‡¥Ç‡¥ó‡µç‡¥∑‡µª
async function fetchDoctors() {
  try {
    const response = await axios.get(
      "https://www.api.vyzo.in/api/customer/doctor"
    );
    return response.data.data; // ‡¥°‡µã‡¥ï‡µç‡¥ü‡µº‡¥Æ‡¥æ‡¥∞‡µÅ‡¥ü‡µÜ ‡¥™‡¥ü‡µç‡¥ü‡¥ø‡¥ï ‡¥§‡¥ø‡¥∞‡¥ø‡¥ï‡µÜ ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï
  } catch (error) {
    console.error("‡¥°‡µã‡¥ï‡µç‡¥ü‡µº‡¥Æ‡¥æ‡¥∞‡µÜ ‡¥≤‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥™‡¥ø‡¥∂‡¥ï‡µç:", error);
    return [];
  }
}

// ‡¥°‡µã‡¥ï‡µç‡¥ü‡¥±‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥®‡¥ø‡¥≤‡¥µ‡¥ø‡¥≤‡µÜ ‡¥ü‡µã‡¥ï‡µç‡¥ï‡µª ‡¥≤‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥´‡¥Ç‡¥ó‡µç‡¥∑‡µª
async function fetchDoctorStatus(doctorId) {
  try {
    const response = await axios.get(
      `https://www.api.vyzo.in/api/customer/liveStatus/${doctorId}`
    );
    return response.data.data; // ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ API ‡¥â‡¥§‡µç‡¥§‡¥∞‡¥Ç ‡¥Ö‡¥ü‡¥ø‡¥∏‡µç‡¥•‡¥æ‡¥®‡¥Æ‡¥æ‡¥ï‡µç‡¥ï‡¥ø ‡¥á‡¥§‡µç ‡¥ï‡µç‡¥∞‡¥Æ‡µÄ‡¥ï‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
  } catch (error) {
    console.error("‡¥°‡µã‡¥ï‡µç‡¥ü‡µº ‡¥∏‡µç‡¥•‡¥ø‡¥§‡¥ø ‡¥®‡µá‡¥ü‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡¥®‡¥ø‡¥ü‡µÜ ‡¥™‡¥ø‡¥∂‡¥ï‡µç:", error);
    return null;
  }
}

// WhatsApp ‡¥≤‡µÜ ‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥ï‡µá‡µæ‡¥ï‡µç‡¥ï‡µÅ‡¥ï
client.on("message", async (message) => {
  const content = message.body.toLowerCase();

  // ‡¥ü‡µã‡¥ï‡µç‡¥ï‡µª ‡¥∏‡µç‡¥•‡¥ø‡¥§‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥∏‡µç‡¥•‡¥ø‡¥∞‡µÄ‡¥ï‡¥∞‡¥£‡¥Ç ‡¥ï‡µà‡¥ï‡¥æ‡¥∞‡µç‡¥Ø‡¥Ç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï
  if (content === "yes") {
    const doctors = await fetchDoctors();

    if (doctors.length > 0) {
      let doctorList = "‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥æ‡¥Ø ‡¥°‡µã‡¥ï‡µç‡¥ü‡µº‡¥Æ‡¥æ‡µº:\n";
      doctors.forEach((doctor, index) => {
        doctorList += `${index + 1}. ${doctor.name} - ${doctor.hospital}\n`;
      });
      doctorList += "‡¥¶‡¥Ø‡¥µ‡¥æ‡¥Ø‡¥ø ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥Ü‡¥ó‡µç‡¥∞‡¥π‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥® ‡¥°‡µã‡¥ï‡µç‡¥ü‡¥±‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥®‡¥Æ‡µç‡¥™‡µº ‡¥®‡µΩ‡¥ï‡µÅ‡¥ï.";

      // ‡¥°‡µã‡¥ï‡µç‡¥ü‡µº ‡¥™‡¥ü‡µç‡¥ü‡¥ø‡¥ï ‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥Ç ‡¥Ö‡¥Ø‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥ï
      await client.sendMessage(message.from, doctorList);
    } else {
      await client.sendMessage(message.from, "‡¥®‡¥ø‡¥≤‡¥µ‡¥ø‡µΩ ‡¥í‡¥∞‡µÅ ‡¥°‡µã‡¥ï‡µç‡¥ü‡¥±‡µÅ‡¥Ç ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥≤‡µç‡¥≤.");
    }
    return; // ‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥™‡µç‡¥∞‡µã‡¥∏‡¥∏‡µç‡¥∏‡¥ø‡¥Ç‡¥ó‡µç ‡¥§‡¥ü‡¥Ø‡µÅ‡¥ï
  }

  // ‡¥°‡µã‡¥ï‡µç‡¥ü‡µº ‡¥§‡¥ø‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡¥§‡¥ø‡¥®‡µÅ‡¥≥‡µç‡¥≥ ‡¥®‡¥Æ‡µç‡¥™‡µº
  if (!isNaN(content)) {
    const serialNumber = parseInt(content);
    const doctors = await fetchDoctors(); // ‡¥™‡µÅ‡¥§‡¥ø‡¥Ø ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥≤‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥µ‡µÄ‡¥£‡µç‡¥ü‡µÅ‡¥Ç ‡¥°‡µã‡¥ï‡µç‡¥ü‡µº‡¥Æ‡¥æ‡¥∞‡µÜ ‡¥≤‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï

    if (serialNumber > 0 && serialNumber <= doctors.length) {
      const doctor = doctors[serialNumber - 1];
      await client.sendMessage(
        message.from,
        `‡¥®‡¥ø‡¥ô‡µç‡¥ô‡µæ ${doctor.hospital} ‡¥Ü‡¥∂‡µÅ‡¥™‡¥§‡µç‡¥∞‡¥ø‡¥Ø‡¥ø‡¥≤‡µÜ Dr. ${doctor.name} ‡¥®‡µÜ ‡¥§‡µÜ‡¥∞‡¥û‡µç‡¥û‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡µÅ. ‡¥®‡¥ø‡¥≤‡¥µ‡¥ø‡¥≤‡µÜ ‡¥ü‡µã‡¥ï‡µç‡¥ï‡µª ‡¥™‡¥∞‡¥ø‡¥∂‡µã‡¥ß‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥®‡µç‡¥®‡µÅ...`
      );

      const doctorStatus = await fetchDoctorStatus(doctor._id);

      if (doctorStatus) {
        const waitingRoomLink = `https://vyzo-waitingroom.netlify.app/details?id=${doctor._id}`;
        const tokenMessage = doctorStatus.currentToken
          ? `‡¥®‡¥ø‡¥≤‡¥µ‡¥ø‡¥≤‡µÜ ‡¥ü‡µã‡¥ï‡µç‡¥ï‡µ∫ ‡¥®‡¥Æ‡µç‡¥™‡µº: ${doctorStatus.currentToken}`
          : `‡¥®‡¥ø‡¥≤‡¥µ‡¥ø‡¥≤‡µÜ ‡¥∏‡µç‡¥•‡¥ø‡¥§‡¥ø: ${doctorStatus.doctorStatus}`;

        await client.sendMessage(message.from, `${tokenMessage}\n\n‡¥ï‡µÇ‡¥ü‡µÅ‡¥§‡µΩ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥Ç, ‡¥§‡µÅ‡¥ü‡µº‡¥®‡µç‡¥®‡µÅ‡¥≥‡µç‡¥≥ ‡¥ü‡µã‡¥ï‡µç‡¥ï‡µ∫ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥Ç ‡¥Ö‡¥±‡¥ø‡¥Ø‡µÅ‡¥µ‡¥æ‡µª, ‡¥§‡¥æ‡¥¥‡µÜ ‡¥®‡µΩ‡¥ï‡¥ø‡¥Ø ‡¥≤‡¥ø‡¥ô‡µç‡¥ï‡µç ‡¥â‡¥™‡¥Ø‡µã‡¥ó‡¥™‡µç‡¥™‡µÜ‡¥ü‡µÅ‡¥§‡µç‡¥§‡µÅ‡¥ï
${waitingRoomLink}`);
      } else {
        await client.sendMessage(message.from, `Dr. ${doctor.name} ‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥ü‡µã‡¥ï‡µç‡¥ï‡µª ‡¥≤‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥ï‡¥¥‡¥ø‡¥Ø‡µÅ‡¥®‡µç‡¥®‡¥ø‡¥≤‡µç‡¥≤.`);
      }
    } else {
      await client.sendMessage(message.from, "‡¥Ö‡¥≠‡µç‡¥Ø‡¥∏‡µç‡¥§‡µª ‡¥®‡¥Æ‡µç‡¥™‡µº ‡¥Ö‡¥∏‡¥æ‡¥ß‡µÅ‡¥µ‡¥æ‡¥£‡µç.");
    }
  }

  // ‡¥Æ‡¥±‡µç‡¥±‡µç ‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥ô‡µç‡¥ô‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥∏‡µç‡¥µ‡¥æ‡¥ó‡¥§‡¥Ç ‡¥∏‡¥®‡µç‡¥¶‡µá‡¥∂‡¥Ç ‡¥Ö‡¥Ø‡¥Ø‡µç‡¥ï‡µç‡¥ï‡µÅ‡¥ï
  else {
    await client.sendMessage(message.from, `VYZO-‡¥Ø‡¥ø‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥∏‡µç‡¥µ‡¥æ‡¥ó‡¥§‡¥Çüôè...`);
    await client.sendMessage(message.from, `‡¥§‡¥æ‡¥ô‡µç‡¥ï‡µæ‡¥ï‡µç‡¥ï‡µç ‡¥ü‡µã‡¥ï‡µç‡¥ï‡µ∫ ‡¥∏‡¥Ç‡¥¨‡¥¶‡µç‡¥ß‡¥ø‡¥ö‡µç ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ ‡¥Ö‡¥±‡¥ø‡¥Ø‡¥£‡¥Æ‡µÜ‡¥ô‡µç‡¥ï‡¥ø‡µΩ "yes" ‡¥é‡¥®‡µç‡¥®‡µç¬†‡¥ü‡µà‡¥™‡µç‡¥™‡µç¬†‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï
`);
  }
});

// WhatsApp ‡¥ï‡µç‡¥≤‡¥Ø‡¥®‡µç‡¥±‡µç ‡¥Ü‡¥∞‡¥Ç‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
client.initialize();

// ‡¥ö‡¥ø‡¥≤ ‡¥µ‡µÜ‡¥¨‡µç ‡¥â‡¥≥‡µç‡¥≥‡¥ü‡¥ï‡µç‡¥ï‡¥Ç ‡¥™‡µç‡¥∞‡¥¶‡µº‡¥∂‡¥ø‡¥™‡µç‡¥™‡¥ø‡¥ï‡µç‡¥ï‡¥æ‡µª ‡¥é‡¥ï‡µç‡¥∏‡µç‡¥™‡µç‡¥∞‡¥∏‡µç‡¥∏‡µç ‡¥∏‡µÜ‡µº‡¥µ‡µº ‡¥ï‡µç‡¥∞‡¥Æ‡µÄ‡¥ï‡¥∞‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
app.get("/", (req, res) => {
  res.send("<h1>WhatsApp ‡¥¨‡µã‡¥ü‡µç‡¥ü‡µç ‡¥∏‡µá‡¥µ‡¥®‡¥§‡µç‡¥§‡¥ø‡¥≤‡µá‡¥ï‡µç‡¥ï‡µç ‡¥∏‡µç‡¥µ‡¥æ‡¥ó‡¥§‡¥Ç!</h1>");
});

app.get("/doctors", async (req, res) => {
  const doctors = await fetchDoctors();
  if (doctors.length > 0) {
    let doctorList = "<h2>‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥æ‡¥Ø ‡¥°‡µã‡¥ï‡µç‡¥ü‡µº‡¥Æ‡¥æ‡µº:</h2><ul>";
    doctors.forEach((doctor, index) => {
      doctorList += `<li>${index + 1}. ${doctor.name} - ${doctor.hospital}</li>`;
    });
    doctorList += "</ul>";
    res.send(doctorList);
  } else {
    res.send("<h2>‡¥®‡¥ø‡¥≤‡¥µ‡¥ø‡µΩ ‡¥í‡¥∞‡µÅ ‡¥°‡µã‡¥ï‡µç‡¥ü‡¥±‡µÅ‡¥Ç ‡¥≤‡¥≠‡µç‡¥Ø‡¥Æ‡¥≤‡µç‡¥≤.</h2>");
  }
});

// ‡¥™‡µã‡µº‡¥ü‡µç‡¥ü‡¥ø‡µΩ 3000 ‡¥é‡¥ï‡µç‡¥∏‡µç‡¥™‡µç‡¥∞‡¥∏‡µç ‡¥∏‡µÜ‡µº‡¥µ‡µº ‡¥Ü‡¥∞‡¥Ç‡¥≠‡¥ø‡¥ï‡µç‡¥ï‡µÅ‡¥ï
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server running on port: ${PORT}`);
});
